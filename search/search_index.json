{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webslate - Java Basics","text":"<p>Welcome to the Webslate documentation for Java Basics.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>math_algorithms</li> <li>search_algorithms</li> <li>algorithms</li> <li>Operators</li> <li>loop</li> <li>control_flow</li> <li>exception_handling</li> <li>methods</li> <li>recursion</li> <li>variables</li> <li>basics</li> <li>collections_framework</li> <li>data_structures</li> <li>String</li> <li>math</li> <li>primitive_data_type</li> <li>data_types</li> <li>palindrome</li> <li>leet_code</li> <li>abstraction</li> <li>inheritance</li> <li>polymorphism</li> <li>oops</li> <li>utils</li> </ul>"},{"location":"algorithms/introduction","title":"Algorithm Basics goes here","text":""},{"location":"algorithms/math_algorithms","title":"Math Algorithms","text":"<p>This section covers math_algorithms.</p> <ul> <li>euclidean_find_distance.md</li> </ul>"},{"location":"algorithms/math_algorithms/euclidean_find_distance","title":"Euclidean Find Distance","text":""},{"location":"algorithms/math_algorithms/euclidean_find_distance#euclideanfinddistancejava","title":"EuclideanFindDistance.java","text":"<pre><code>package algorithms.math_algorithms;\n\nimport java.util.Scanner;\n\npublic class EuclideanFindDistance {\n  public static void main(String args[]) {\n    int x1, y1, x2, y2;\n    Scanner scannerInstance = new Scanner(System.in);\n\n    System.out.println(\"Enter your input\");\n    // Read Input\n    x1 = scannerInstance.nextInt();\n    y1 = scannerInstance.nextInt();\n    x2 = scannerInstance.nextInt();\n    y2 = scannerInstance.nextInt();\n\n    Point p1 = new Point(x1, y1);\n    Point p2 = new Point(x2, y2);\n    double distance = findDistance(p1, p2);\n    System.out.println(distance);\n  }\n\n  public static double findDistance(Point p1, Point p2) {\n    return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + \n    (p2.y - p1.y) * (p2.y - p1.y));\n  }\n}\n\nclass Point {\n  int x, y;\n\n  public Point(int x, int y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\n// Compile and Run the below command.\n// javac algorithms/math/EuclideanFindDistance.java &amp;&amp; java algorithms.math.EuclideanFindDistance\n</code></pre>"},{"location":"algorithms/search_algorithms","title":"Search Algorithms","text":"<p>This section covers search_algorithms.</p> <ul> <li>binary_search.md</li> </ul>"},{"location":"algorithms/search_algorithms/binary_search","title":"Binary Search","text":""},{"location":"algorithms/search_algorithms/binary_search#binarysearchjava","title":"BinarySearch.java","text":"<pre><code>package algorithms.search_algorithms;\n\n</code></pre>"},{"location":"basics","title":"Basics","text":"<p>This section covers basics.</p> <ul> <li>simple_example.md</li> </ul>"},{"location":"basics/introduction","title":"Introduction","text":"<ol> <li>Java programming language created in 1995.</li> <li>Owned by Oracle, and more than 3 billion devices run Java.</li> </ol>"},{"location":"basics/introduction#why-use-java","title":"Why Use Java?","text":"<ol> <li>Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)</li> <li>Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs</li> </ol>"},{"location":"basics/introduction#things-you-should-know","title":"Things you should know","text":"<ol> <li>Mostly Return type will come before the name.</li> </ol> <pre><code>void main(String[] args) {\nreturn main(return type paramName) {}\n</code></pre> <ol> <li>you can check your java compiler version by <code>javac -version</code></li> <li>you can check your java version by <code>java -version</code></li> <li>First compile your java code by <code>javac -verbose basics/Basics.java</code>, After compilation, this will generate java.class file along with package and basic statements.</li> <li>Class name should always start with an uppercase first letter. Run your java class after compiled by <code>java basics.Basics</code></li> <li>The name of the java file must match the class name.</li> <li>Any code inside the main() method will be executed.</li> <li>You should also note that each code statement must end with a semicolon (;).</li> <li>Text must be wrapped inside double quotations marks \"\". <code>System.out.println(\"Java Basics \");</code></li> <li>You can use the <code>+</code> character for concatenation to add a variable to another variable:</li> <li>Variable Names can also begin with \"$\" and \"_\"</li> </ol>"},{"location":"basics/simple_example","title":"Simple Example","text":""},{"location":"basics/simple_example#simpleexamplejava","title":"SimpleExample.java","text":"<pre><code>package basics;\n\npublic class SimpleExample {\n  public static void main(String[] args) {\n    // Below accept parameter and print along with \"Java Basics\".\n    System.out.println(\"Java Basics \" + args[0]); // Here args[0] meant that its first word.\n  }\n}\n\n// javac basics/Basics.java &amp;&amp; java basics.Basics hello\n</code></pre>"},{"location":"basics/Operators","title":"Operators","text":"<p>This section covers Operators.</p>"},{"location":"basics/Operators#java-operatos","title":"Java Operatos","text":"<p>Operators are used to perform operations on variables and values.</p>"},{"location":"basics/Operators#types-of-operators","title":"Types of Operators","text":"<ul> <li>Arithmetic operators</li> <li>Assignment operators</li> <li>Comparison operators</li> <li>Logical operators</li> <li>Bitwise operators</li> </ul>"},{"location":"basics/Operators#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are used to perform common mathematical operations.</p> Operator Name Description Example + Addition Adds together two values x + y - Subtraction Subtracts one value from another x - y * Multiplication Multiplies two values x * y / Division Divides one value by another x / y % Modulus Returns the division remainder x % y ++ Increment Increases the value of a variable by 1 ++x -- Decrement Decreases the value of a variable by 1 --x"},{"location":"basics/Operators#post-incrementdecrement","title":"Post-Increment/Decrement","text":"<p>Post-Increment (x++): The current value of x is used in the expression, and then x is incremented by 1. Post-Decrement (x--): The current value of x is used in the expression, and then x is decremented by 1.</p>"},{"location":"basics/Operators#pre-incrementdecrement","title":"Pre-Increment/Decrement","text":"<p>Pre-Increment (++x): x is incremented by 1 first, and then the new value of x is used in the expression. Pre-Decrement (--x): x is decremented by 1 first, and then the new value of x is used in the expression.</p>"},{"location":"basics/Operators#assignment-operators","title":"Assignment Operators","text":"<p>Assignment operators are used to assign values to variables. | Operator Name         | Operator | Example   | Same As       | |-----------------------|----------|-----------|---------------| | Assignment            | =        | x = 5     | x = 5         | | Addition Assignment    | +=       | x += 3    | x = x + 3     | | Subtraction Assignment | -=       | x -= 3    | x = x - 3     | | Multiplication Assignment | =    | x = 3    | x = x * 3     | | Division Assignment    | /=       | x /= 3    | x = x / 3     | | Modulus Assignment     | %=       | x %= 3    | x = x % 3     | | Bitwise AND Assignment | &amp;=       | x &amp;= 3    | x = x &amp; 3     | | Bitwise OR Assignment  | |=      | x |= 3   | x = x | 3    | | Bitwise XOR Assignment | ^=       | x ^= 3    | x = x ^ 3     | | Right Shift Assignment | &gt;&gt;=      | x &gt;&gt;= 3   | x = x &gt;&gt; 3    | | Left Shift Assignment  | &lt;&lt;=      | x &lt;&lt;= 3   | x = x &lt;&lt; 3    |</p>"},{"location":"basics/Operators#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values.</p> Name Operator Example Equal to == x == y Not equal != x != y Greater than &gt; x &gt; y Less than &lt; x &lt; y Greater than or equal to &gt;= x &gt;= y Less than or equal to &lt;= x &lt;= y"},{"location":"basics/Operators#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to determine the logic between variables or values.</p> Name Operator Example Alternative Description Logical and &amp;&amp; x &lt; 5 &amp;&amp; x &lt; 10 AND Returns true if both statements are true Logical or || x &lt; 5 x &lt; 4 Logical not ! !(x &lt; 5 &amp;&amp; x &lt; 10) NOT Reverses the result, returns false if true <ul> <li>arithmetic.md</li> <li>assignment.md</li> <li>comparision.md</li> </ul>"},{"location":"basics/Operators/arithmetic","title":"Arithmetic","text":""},{"location":"basics/Operators/arithmetic#arithmeticjava","title":"Arithmetic.java","text":"<pre><code>package basics.operators;\n\npublic class Arithmetic {\n  public static void main(String[] args) {\n    int a = 150;\n    int b = 100;\n    System.out.println(\"Addition of 100 + 150:\" + (a + b));\n    System.out.println(\"Subraction of 150 - 100:\" + (a - b));\n    System.out.println(\"Multiplication of 100 * 150:\" + (a * b));\n    System.out.println(\"Division of 150 / 100:\" + (a / b));\n    System.out.println(\"Modulus of 150 % 100:\" + (a % b));\n    System.out.println(\"Pre Increment of 150:\" + (++a));\n    System.out.println(\"Post Decrement of 100:\" + (b--));\n  }\n\n}\n// javac basics/Operators/Arithmetic.java &amp;java basics.Operators.Arithmetic\n</code></pre>"},{"location":"basics/Operators/assignment","title":"Assignment","text":""},{"location":"basics/Operators/assignment#assignmentjava","title":"Assignment.java","text":"<pre><code>package basics.operators;\n\npublic class Assignment {\n  public static void main(String[] args) {\n    int x = 5; // Assignment operator (=)\n    System.out.println(\"x = \" + x); \n\n    // Addition assignment (+=)\n    x += 3;\n    System.out.println(\"5 += 3 should returns 8 and x is \" + x); \n\n    // Subtraction assignment (-=)\n    x -= 2;\n    System.out.println(\"8 -= 2 should returns 6 and x is: \" + x); \n\n    // Multiplication assignment (*=)\n    x *= 4;\n    System.out.println(\"6 *= 4 should returns 24 and x is: \" + x); \n\n    // Division assignment (/=)\n    x /= 3;\n    System.out.println(\"24 /= 3 should returns 8 and x is \" + x); \n\n    // Modulus assignment (%=)\n    x %= 5;\n    System.out.println(\"8 %= 5 should returns 3 and x is \" + x); \n\n    // Bitwise AND assignment (&amp;=)\n    x=3; // Binary of 3: 011\n    x &amp;= 2; // 10 (binary for 2)\n    System.out.println(\"3 &amp;= 2 should returns 2 and x is \" + x); \n\n    // Bitwise OR assignment (|=)\n    x |= 1; // Equivalent to: x = x | 1\n    System.out.println(\"x |= 1 should returns 3 and x is \" + x); \n\n    // Bitwise XOR assignment (^=)\n    x ^= 3; // Equivalent to: x = x ^ 3\n    System.out.println(\"x ^= 3 should returns 0 and x is \" + x); \n\n    // Right shift assignment (&gt;&gt;=)\n    x = 8; // Binary: 1000\n    x &gt;&gt;= 2; // Shift right by 2 positions\n            // Result: 0010 (2 in decimal\n    System.out.println(\"x &gt;&gt;= 2 should returns 2 and x is \" + x);  \n\n    // Left shift assignment (&lt;&lt;=)\n    x &lt;&lt;= 3; // Equivalent to: x = x &lt;&lt; 3\n    System.out.println(\"x &lt;&lt;= 3 should returns 16 and x is \" + x); \n  }\n}\n\n// javac basics/Operators/Assignment.java &amp;&amp; java basics.Operators.Assignment\n</code></pre>"},{"location":"basics/Operators/comparision","title":"Comparision","text":""},{"location":"basics/Operators/comparision#comparisionjava","title":"Comparision.java","text":"<pre><code>package basics.operators;\n\npublic class Comparision {\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 20;\n    int c = 30;\n    System.out.println(\"State True/False\");\n    System.out.println(\"-\".repeat(30));\n    System.out.println(\"Whether 10 and 20 are equal: \" + (a == b));// Return false since 10 and 20 are not equal\n    System.out.println(\"10 and 20 are not equal: \" + (a != b));// returns True\n    System.out.println(\"10 is lesser than 20 : \" + (a &lt; b));// returns True\n    System.out.println(\"30 is greater than 20: \" + (c &gt; b));// returns True\n  }\n}\n// javac basics/Operators/Comparision.java &amp;&amp; java basics.Operators.Comparision\n</code></pre>"},{"location":"basics/control_flow","title":"Control Flow","text":"<p>This section covers control_flow.</p> <ul> <li>else_if.md</li> <li>if.md</li> <li>if_else.md</li> </ul>"},{"location":"basics/control_flow/else_if","title":"Else If","text":""},{"location":"basics/control_flow/else_if#elseifjava","title":"ElseIf.java","text":"<pre><code>package basics.control_flow;\n\npublic class ElseIf {\n  public static void main(String[] args) {\n    int age = 22;\n\n    if (age &lt; 13) {\n      System.out.println(\"You are just child now.\");\n    } else if (age &gt;= 13 &amp;&amp; age &lt; 20) {\n      System.out.println(\"You are a teenager.\");\n    } else if (age &gt;= 20 &amp;&amp; age &lt; 65) {\n      System.out.println(\"You are an adult.\");\n    } else {\n      System.out.println(\"You are a senior citizen.\");\n    }\n  }\n}\n\n//javac basics/statements/ElseIf.java &amp;&amp; java basics.statements.ElseIf\n</code></pre>"},{"location":"basics/control_flow/if","title":"If","text":""},{"location":"basics/control_flow/if#ifjava","title":"If.java","text":"<pre><code>package basics.control_flow;\n\n//Use if to specify a block of code to be executed, if a specified condition is true\npublic class If {\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 5;\n    if (a &gt; b) {\n      System.out.println(\"10 is greater\");\n    }\n    if (a &lt; b) { //10 &lt; 5 which is false\n      System.out.println(\"This won't be printed because the statement is false\");\n    }\n  }\n}\n\n// javac basics/statements/If.java &amp;&amp; java basics.statements.If\n\n</code></pre>"},{"location":"basics/control_flow/if_else","title":"If Else","text":""},{"location":"basics/control_flow/if_else#ifelsejava","title":"IfElse.java","text":"<pre><code>package basics.control_flow;\n\n//Else statement displays only when if statement is false\npublic class IfElse{\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 5;\n    if (a &lt; b) {\n      System.out.println(\"5 is greater\"); //This condition is false\n    }\n    else{\n      System.out.println(\"10 is greater\"); \n    }\n  }\n}\n\n//javac basics/statements/IfElse.java &amp;&amp; java basics.statements.IfElse\n</code></pre>"},{"location":"basics/control_flow/loop","title":"Loop","text":"<p>This section covers loop.</p> <ul> <li>for.md</li> <li>while.md</li> </ul>"},{"location":"basics/control_flow/loop/for","title":"For","text":""},{"location":"basics/control_flow/loop/for#forjava","title":"For.java","text":"<pre><code>package basics.control_flow.loop;\npublic class For{\n  public static void main(String[] args) {\n    //Printing string for 5 times using for loop\n  for(int i=1;i&lt;=5;i=i+1){\n    System.out.println(\"Java\");\n}\n  //Print even numbers\n  for(int i=1;i&lt;=10;i=i+1){\n   if(i%2==0){\n      System.out.println(i);\n  }\n}\n  }\n}\n\n//javac basics/statements/loop/For.java &amp;&amp; java basics.statements.loop.For\n</code></pre>"},{"location":"basics/control_flow/loop/intro","title":"Loops","text":""},{"location":"basics/control_flow/loop/intro#different-types-of-loop","title":"Different Types of Loop","text":"<ul> <li>For loop</li> <li>While loop</li> <li>Do-while loop</li> <li>For-each loop</li> </ul>"},{"location":"basics/control_flow/loop/intro#for-loop","title":"For loop","text":"<p>For loop is a control structure in programming that allows you to repeat a block of code a specific number of times.</p> <pre><code>for (initialization; condition; increment) {\n    // Code to be executed\n}\n</code></pre> <ol> <li> <p>Initialization: This step runs once at the beginning and is usually used to define and set the loop counter.</p> </li> <li> <p>Condition: Before each iteration, this condition is evaluated. If it is true, the loop continues; if false, the loop ends.</p> </li> <li> <p>Increment: This step updates the loop counter after each iteration.</p> </li> </ol> <p>EXAMPLE</p>"},{"location":"basics/control_flow/loop/intro#for-loop-example-printing-numbers-from-1-to-10","title":"For Loop Example: Printing Numbers from 1 to 10","text":"<pre><code>// This program prints the numbers from 1 to 10, inclusive.\nfor (int i = 1; i &lt;= 10; i = i + 1) {\n    System.out.println(i);\n}\n</code></pre>"},{"location":"basics/control_flow/loop/intro#explanation-of-above-code","title":"Explanation of above code","text":"<ul> <li> <p>Initialization: <code>int i = 1</code>   Starts the counter at 1.</p> </li> <li> <p>Condition: <code>i &lt;= 10</code>   Continues the loop while <code>i</code> is less than or equal to 10.</p> </li> <li> <p>Increment: <code>i = i + 1</code>   Increases <code>i</code> by 1 after each iteration.</p> </li> <li> <p>Loop Body:   Executes <code>System.out.println(i);</code> to print the current value of <code>i</code> to the console, outputting numbers from 1 to 10.</p> </li> </ul>"},{"location":"basics/control_flow/loop/intro#while-loop","title":"While loop","text":"<p>The while loop loops through a block of code as long as a specified condition is true</p> <pre><code>while (condition) {\n  // code block to be executed\n}\n</code></pre> <p>EXAMPLE</p>"},{"location":"basics/control_flow/loop/intro#while-loop-example-printing-numbers-from-1-to-10","title":"While Loop Example: Printing Numbers from 1 to 10","text":"<pre><code>// This program prints the numbers from 1 to 10 using a while loop.\nint i = 1; // Initialization\nwhile (i &lt;= 10) { // Condition\n    System.out.println(i); // Loop Body\n    i++; // Increment\n}\n</code></pre>"},{"location":"basics/control_flow/loop/intro#explanation","title":"Explanation","text":"<ul> <li>Initialization:</li> <li> <p><code>int i = 1;</code>     Initializes the counter variable <code>i</code> to <code>1</code>.</p> </li> <li> <p>Condition:</p> </li> <li> <p><code>while (i &lt;= 10)</code>     Checks if <code>i</code> is less than or equal to <code>10</code>. The loop executes while this condition is <code>true</code>.</p> </li> <li> <p>Loop Body:</p> </li> <li> <p><code>System.out.println(i);</code>     Prints the current value of <code>i</code> to the console.</p> </li> <li> <p>Increment:</p> </li> <li><code>i++;</code>     Increments <code>i</code> by <code>1</code> after each iteration.</li> </ul> <p><code>For loop and while loop are similar When we dont know the stop value,we can prefer while loop instead</code></p>"},{"location":"basics/control_flow/loop/while","title":"While","text":""},{"location":"basics/control_flow/loop/while#whilejava","title":"while.java","text":""},{"location":"basics/exception_handling/exceptions_types","title":"exceptions_types","text":""},{"location":"basics/exception_handling/throwing_exceptions","title":"throwing_exceptions","text":""},{"location":"basics/exception_handling/try_catch","title":"try_catch","text":""},{"location":"basics/methods/introduction","title":"introduction","text":""},{"location":"basics/methods/method_overloading","title":"method_overloading","text":""},{"location":"basics/recursion","title":"Recursion","text":"<p>This section covers recursion.</p> <ul> <li>basic_recursion.md</li> </ul>"},{"location":"basics/recursion/basic_recursion","title":"Basic Recursion","text":""},{"location":"basics/recursion/basic_recursion#basicrecursionjava","title":"BasicRecursion.java","text":""},{"location":"basics/recursion/introduction","title":"recursion","text":""},{"location":"basics/variables","title":"Variables","text":"<p>This section covers variables.</p> <ul> <li>basic_variables.md</li> </ul>"},{"location":"basics/variables/basic_variables","title":"Basic Variables","text":""},{"location":"basics/variables/basic_variables#basicvariablesjava","title":"BasicVariables.java","text":"<pre><code>package basics.variables;\n\npublic class BasicVariables {\n  public static void main(String[] args) {\n    String title = \"Basic String Variable\";\n    System.out.println(title);\n    System.out.println(\"--------------------\");\n    final String finalVariable = \"Final Variable helps to prevent overwrite value, you can declare as final.\";\n    final String constantVariable = \"You can declare as constant as well.\";\n    System.out.println(finalVariable);\n    System.out.println(constantVariable);\n    String stringVariable, intVariable, floatVariable, booleanVariable, charVariable;\n    stringVariable = intVariable = floatVariable = booleanVariable = charVariable = \" is Valid variables\";\n    System.out.println(\"String\" + stringVariable);\n    System.out.println(\"Integer \" + intVariable);\n    System.out.println(\"Float\" + floatVariable);\n    System.out.println(\"Boolean\" + booleanVariable);\n    System.out.println(\"Char \" + charVariable);\n  }\n}\n\n// javac basics/variables/BasicVariables.java &amp;&amp; java basics.variables.BasicVariables\n\n</code></pre>"},{"location":"collections_framework/introduction","title":"collections_framework","text":""},{"location":"data_structures","title":"Data Structures","text":"<p>This section covers data_structures.</p> <ul> <li>basics.md</li> </ul>"},{"location":"data_structures/basics","title":"Basics","text":""},{"location":"data_structures/basics#basicsjava","title":"Basics.java","text":"<pre><code>package data_structures;\n\npublic class Basics {\n\n}\n\n</code></pre>"},{"location":"data_structures/introduction","title":"Data Structures in Java","text":""},{"location":"data_types","title":"Data Types","text":"<p>This section covers data_types.</p> <ul> <li>basic_data_type.md</li> <li>data_types.md</li> </ul>"},{"location":"data_types/basic_data_type","title":"Basic Data Type","text":""},{"location":"data_types/basic_data_type#basicdatatypejava","title":"BasicDataType.java","text":"<pre><code>package data_types;\n\npublic class BasicDataType {\n  public static void main(String[] args) {\n    int dataTypes = 5;\n    String title = \" Basic Data Types\";\n    System.out.println(dataTypes + title);\n    // Below statement will return '37 Basic Data Types' basically 5 + Space (32)\n    // System.out.println(dataTypes + ' ' + title);\n    System.out.println(\"-------------------------\");\n    System.out.println(\"String - words / text quoted by double quotes\");\n    System.out.println(\"int - whole number\");\n    System.out.println(\"float - decimals\");\n    System.out.println(\"char - letter / single character quoted by single quotes\");\n    System.out.println(\"boolean - true or false\");\n  }\n}\n\n\n //Execute the below command\n// javac data_types/BasicDataType.java &amp;&amp; java data_types.BasicDataType\n\n</code></pre>"},{"location":"data_types/data_types","title":"Data Types","text":""},{"location":"data_types/data_types#datatypesjava","title":"DataTypes.java","text":"<pre><code>package data_types;\n\npublic class DataTypes {\n  public static void main(String[] args) {\n    System.out.println(\"Below is Sachin ODI Stats\");\n    String fullName = \"Sachin Ramesh Tendulkar\";\n    char initial = 'R';\n    int runs = 18426;\n    float strikeRate = 44.83f;\n    boolean active = true;\n\n    System.out.println(\"full name: \" + fullName);\n    System.out.println(\"Initial: \" + initial);\n    System.out.println(\"Runs: \" + runs);\n    System.out.println(\"Strike Rate: \" + strikeRate);\n    System.out.println(\"is Active: \" + active);\n  }\n}\n\n/**\n * Execute below command.\n    javac basics/DataTypes.java &amp;&amp; java basics.DataTypes\n */\n</code></pre>"},{"location":"data_types/introduction","title":"Data Types","text":""},{"location":"data_types/introduction#two-data-types","title":"Two Data Types","text":"<ol> <li>Primitive data types (8 - byte, short, int, long, float, double, boolean, char)</li> <li>Non-primitive data types (4 - String, Array, Class, Interface)</li> </ol>"},{"location":"data_types/introduction#eight-primitive-data-types","title":"Eight Primitive Data Types","text":"<ul> <li>Primitive types are predefined (already defined) in Java. </li> <li>A primitive type always has a value.</li> <li> <p>A primitive type starts with a lowercase letter.</p> </li> <li> <p>Integer Types</p> </li> <li>byte</li> <li>short</li> <li>int</li> <li>long</li> <li>Floating Point Types</li> <li>float</li> <li>double </li> <li>Other Types</li> <li>boolean </li> <li>char</li> </ul>"},{"location":"data_types/introduction#below-is-the-table-for-all-primitive-data-types","title":"Below is the table for all Primitive Data Types.","text":"Data Type Size Description byte 1 byte Stores whole numbers from -128 to 127 short 2 bytes Stores whole numbers from -32,768 to 32,767 int 4 bytes Stores whole numbers from -2,147,483,648 to 2,147,483,647 long 8 bytes Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 float 4 bytes Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits double 8 bytes Stores fractional numbers. Sufficient for storing 15 decimal digits boolean 1 bit Stores true or false values char 2 bytes Stores a single character/letter or ASCII values"},{"location":"data_types/introduction#what-happens-when-we-assign-numbers-outside-the-given-range","title":"What Happens When We Assign Numbers Outside the Given Range?","text":"<p>When you assign a number outside the given range of a byte in Java, which is from -128 to 127, it leads to an overflow. However, the following code will not compile due to a type mismatch:</p> <pre><code>byte num = 200; // error: incompatible types: possible lossy conversion from int to byte\nSystem.out.println(num);\n</code></pre> <pre><code>long e = 1000000000000000000000000000L; //error: integer number too large\nSystem.out.println(num);\n</code></pre>"},{"location":"data_types/introduction#why-these-ranges-in-these-data-types","title":"Why these ranges in these data types?","text":"<ul> <li>The range of integer data types such as byte, short, int, and long is determined by the number of bits allocated for each type and the way these bits are used to represent signed integers in binary.</li> <li>The ranges are derived from the number of bits and the method of two's complement representation</li> <li>Since two's complement representation allocates one bit for the sign, it allows for an extra negative value compared to positive values. This is why, for example, an 8-bit byte can represent from -128 to 127 (128 negative values including zero).</li> </ul>"},{"location":"data_types/introduction#four-non-primitive-data-types","title":"Four Non-Primitive Data Types","text":"<ul> <li>Non-primitive types are created by the programmer and is not defined by Java (except for String).</li> <li>Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.</li> <li>non-primitive types can be null.</li> <li>non-primitive types starts with an uppercase letter.</li> <li>String</li> <li>The String object has methods that are used to perform certain operations on strings. </li> <li>Array</li> <li>Class</li> <li>Interface</li> </ul>"},{"location":"data_types/String","title":"String","text":"<p>This section covers String.</p>"},{"location":"data_types/String#string-methods","title":"String Methods","text":"Category Method Description Example Returns <code>charAt()</code> Returns the character at the specified index (position) <code>\"Hello\".charAt(1)</code> returns <code>'e'</code> <code>codePointAt()</code> Returns the Unicode of the character at the specified index <code>\"Hello\".codePointAt(1)</code> returns <code>101</code> <code>codePointBefore()</code> Returns the Unicode of the character before the specified index <code>\"Hello\".codePointBefore(1)</code> returns <code>72</code> <code>codePointCount()</code> Returns the number of Unicode values found in a string. <code>\"Hello\".codePointCount(0, 5)</code> returns <code>5</code> <code>hashCode()</code> Returns the hash code of a string <code>\"Hello\".hashCode()</code> returns <code>69609650</code> <code>length()</code> Returns the length of a specified string <code>\"Hello\".length()</code> returns <code>5</code> <code>isEmpty()</code> Checks whether a string is empty or not <code>\"\"isEmpty()</code> returns <code>true</code> <code>toCharArray()</code> Converts this string to a new character array <code>\"Hello\".toCharArray()</code> returns <code>['H', 'e', 'l', 'l', 'o']</code> <code>toLowerCase()</code> Converts a string to lower case letters <code>\"Hello\".toLowerCase()</code> returns <code>\"hello\"</code> <code>toString()</code> Returns the value of a String object <code>String.valueOf(123).toString()</code> returns <code>\"123\"</code> <code>toUpperCase()</code> Converts a string to upper case letters <code>\"Hello\".toUpperCase()</code> returns <code>\"HELLO\"</code> <code>trim()</code> Removes whitespace from both ends of a string <code>\"  Hello  \".trim()</code> returns <code>\"Hello\"</code> <code>valueOf()</code> Returns the string representation of the specified value <code>String.valueOf(123)</code> returns <code>\"123\"</code> Compares <code>compareTo()</code> Compares two strings lexicographically <code>\"abc\".compareTo(\"abd\")</code> returns <code>-1</code> <code>compareToIgnoreCase()</code> Compares two strings lexicographically, ignoring case differences <code>\"abc\".compareToIgnoreCase(\"ABC\")</code> returns <code>0</code> <code>equals()</code> Compares two strings. Returns true if the strings are equal, and false if not <code>\"hello\".equals(\"hello\")</code> returns <code>true</code> <code>equalsIgnoreCase()</code> Compares two strings, ignoring case considerations <code>\"hello\".equalsIgnoreCase(\"HELLO\")</code> returns <code>true</code> <code>regionMatches()</code> Tests if two string regions are equal <code>\"abcdef\".regionMatches(0, \"abc\", 0, 3)</code> returns <code>true</code> Searches <code>contains()</code> Checks whether a string contains a sequence of characters <code>\"Hello\".contains(\"ell\")</code> returns <code>true</code> <code>indexOf()</code> Returns the position of the first found occurrence of specified characters in a string <code>\"Hello\".indexOf(\"l\")</code> returns <code>2</code> <code>lastIndexOf()</code> Returns the position of the last found occurrence of specified characters in a string <code>\"Hello\".lastIndexOf(\"l\")</code> returns <code>3</code> <code>matches()</code> Searches a string for a match against a regular expression, and returns the matches <code>\"abc123\".matches(\".*\\\\d.*\")</code> returns <code>true</code> Adds <code>concat()</code> Appends a string to the end of another string <code>\"Hello\".concat(\" World\")</code> returns <code>\"Hello World\"</code> <code>join()</code> Joins one or more strings with a specified separator <code>String.join(\", \", \"A\", \"B\", \"C\")</code> returns <code>\"A, B, C\"</code> Removes <code>replace()</code> Searches a string for a specified value, and returns a new string where the specified values are replaced <code>\"Hello\".replace(\"l\", \"p\")</code> returns <code>\"Heppo\"</code> <code>replaceAll()</code> Replaces each substring of this string that matches the given regular expression with the given replacement <code>\"Hello\".replaceAll(\"l\", \"p\")</code> returns <code>\"Heppo\"</code> <code>replaceFirst()</code> Replaces the first occurrence of a substring that matches the given regular expression with the given replacement <code>\"Hello\".replaceFirst(\"l\", \"p\")</code> returns <code>\"Heplo\"</code> <code>split()</code> Splits a string into an array of substrings <code>\"A,B,C\".split(\",\")</code> returns <code>[\"A\", \"B\", \"C\"]</code> <code>subSequence()</code> Returns a new character sequence that is a subsequence of this sequence <code>\"Hello\".subSequence(1, 4)</code> returns <code>\"ell\"</code> <ul> <li>strings.md</li> </ul>"},{"location":"data_types/String/strings","title":"Strings","text":""},{"location":"data_types/String/strings#stringsjava","title":"Strings.java","text":"<pre><code>package data_types.String; \n\npublic class Strings { \n    public static void main(String[] args) {\n\n        String text = \"My Favourite Program is Java\"; \n\n        System.out.println(\"The length of this string: \" + text.length());   // Print the length of the string\n        System.out.println(\"UPPERCASED TEXT:\"+ text.toUpperCase());//Print the string in Uppercase\n        System.out.println(\"lowercased text:\"+ text.toLowerCase()); //Print the string in Lowercase\n        System.out.println(text.indexOf(\"P\")); //Finding the index of Character in String\n    }\n}\n\n\n //Execute the below command\n// javac data_types/String/Strings.java &amp;&amp; java data_types.String.Strings\n</code></pre>"},{"location":"data_types/math","title":"Math","text":"<p>This section covers math.</p> <ul> <li>math.md</li> </ul>"},{"location":"data_types/math/math","title":"Math","text":""},{"location":"data_types/math/math#mathjava","title":"Math.java","text":"<pre><code>package data_types.math;\n\npublic class Math {\n\n}\n\n</code></pre>"},{"location":"data_types/primitive_data_type","title":"Primitive Data Type","text":"<p>This section covers primitive_data_type.</p> <ul> <li>float_types.md</li> <li>integer_types.md</li> </ul>"},{"location":"data_types/primitive_data_type/float_types","title":"Float Types","text":""},{"location":"data_types/primitive_data_type/float_types#floattypesjava","title":"FloatTypes.java","text":"<pre><code>package data_types.primitive_data_type;\n\npublic class FloatTypes {\n  public static void main(String[] args) {\n    float a = 5.15f; // Float should end with value f\n    double b = 12E4d; // Double should end with value d.\n                      //A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\n    System.out.println(\"This number is stored in Float:\" + a);\n    System.out.println(\"This number is stored in Double:\" + b);\n  }\n}\n//javac data_types/primitive_datatype/FloatTypes.java &amp;&amp; java data_types.primitive_datatype.FloatTypes\n</code></pre>"},{"location":"data_types/primitive_data_type/integer_types","title":"Integer Types","text":""},{"location":"data_types/primitive_data_type/integer_types#integertypesjava","title":"IntegerTypes.java","text":"<pre><code>package data_types.primitive_data_type;\n\npublic class IntegerTypes {\n  public static void main(String[] args) {\n    byte a = 100; // byte datatype stores number from -128 to 127\n    short b = 5000; // The short datatype can store numbers from -32768 to 32767:\n    int c = 10000; // The int datatype can store numbers from -2147483648 to 2147483647.\n    long d = 150000000L; // The long datatype can store numbers from -9223372036854775808 to\n                         // 9223372036854775807. Note that you should end the value with an \"L\"\n    System.out.println(\"This number is stored in byte:\" +a);\n    System.out.println(\"This number is stored in short:\" +b);\n    System.out.println(\"This number is stored in int:\" +c);\n    System.out.println(\"This number is stored in long:\" +d);\n  }\n\n}\n\n//javac data_types/primitive_datatype/IntegerTypes.java &amp;&amp; java data_types.primitive_datatype.IntegerTypes\n\n</code></pre>"},{"location":"leet_code/introduction","title":"Leet Code","text":""},{"location":"leet_code/introduction#leet-code-problems","title":"Leet Code Problems","text":"Problem Quick Solution Brute Force Time Optimized Space Optimized Palindrome O(n) time, O(n) space. Use regex to clean string, convert to lowercase, and compare with its reverse. O(n) time, O(n) space. Clean string by removing non-alphanumeric chars and converting to lowercase. Compare characters from start and end. O(n) time, O(1) space. Two-pointer approach, skipping non-alphanumeric chars and doing case-insensitive comparison. O(n) time, O(1) space. Two-pointer approach, in-place comparison without creating additional strings or character arrays."},{"location":"leet_code/palindrome","title":"Palindrome","text":"<p>This section covers palindrome.</p> <ul> <li>quick_solution.md</li> </ul>"},{"location":"leet_code/palindrome/quick_solution","title":"Quick Solution","text":""},{"location":"leet_code/palindrome/quick_solution#quicksolutionjava","title":"QuickSolution.java","text":"<pre><code>package leet_code.palindrome;\n\npublic class QuickSolution {\n  public static void main(String[] args) {\n    QuickSolution solution = new QuickSolution();\n    boolean result = solution.isPalindrome(\"madam\");\n    System.out.println(\"Is 'madam' palindrome: \" + result);\n  }\n\n  public boolean isPalindrome(String s) {\n    String cleaned = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n    return cleaned.equals(new StringBuilder(cleaned).reverse().toString());\n  }\n}\n\n/**\n * javac leet_code/palindrome/QuickSolution.java\n * java leet_code.palindrome.QuickSolution\n */\n\n\n</code></pre>"},{"location":"oops","title":"Oops","text":"<p>This section covers oops.</p> <ul> <li>basic_class.md</li> </ul>"},{"location":"oops/Introduction","title":"Classes in Java","text":""},{"location":"oops/basic_class","title":"Basic Class","text":""},{"location":"oops/basic_class#basicclassjava","title":"BasicClass.java","text":"<pre><code>package oops;\n\npublic class BasicClass {\n\n}\n\n</code></pre>"},{"location":"oops/inheritance/multiple_inheritance","title":"multiple inheritance","text":""},{"location":"oops/inheritance/single_inheritance","title":"single inheritance","text":""},{"location":"oops/polymorphism/in_real_time","title":"in real time","text":""},{"location":"utils","title":"Utils","text":"<p>This section covers utils.</p> <ul> <li>text_formatter.md</li> </ul>"},{"location":"utils/text_formatter","title":"Text Formatter","text":""},{"location":"utils/text_formatter#textformatterjava","title":"TextFormatter.java","text":"<pre><code>package utils;\n\npublic class TextFormatter {\n  public static void printRepeatedChar(char ch, int count) {\n      System.out.println(String.valueOf(ch).repeat(count));\n  }\n\n  public static void printRepeatedString(String str, int count) {\n      System.out.println(str.repeat(count));\n  }\n\n  public static String getRepeatedChar(char ch, int count) {\n      return String.valueOf(ch).repeat(count);\n  }\n\n  public static String getRepeatedString(String str, int count) {\n      return str.repeat(count);\n  }\n\n  // Dash-specific methods for backward compatibility\n  public static void printDashes(int count) {\n      printRepeatedChar('-', count);\n  }\n\n  public static String getDashes(int count) {\n      return getRepeatedChar('-', count);\n  }\n\n}\n\n</code></pre>"}]}